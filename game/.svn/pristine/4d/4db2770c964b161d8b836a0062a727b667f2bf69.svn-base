package cr.fi.grupomutual.website.controllers;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mobile.device.Device;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;

import cr.fi.grupomutual.website.entities.ContentPage;
import cr.fi.grupomutual.website.entities.ContentSection;
import cr.fi.grupomutual.website.entities.ContentSection.ConsultSectionContentMsjRespType;
import cr.fi.grupomutual.website.entities.MatchContent;
import cr.fi.grupomutual.website.entities.Rate;
import cr.fi.grupomutual.website.entities.Structure;
import cr.fi.grupomutual.website.entities.Structure.ConsultStructureSiteMsjRestType.Section;
import cr.fi.grupomutual.website.utilities.Utils;
import cr.fi.grupomutual.website.ws.HomeWsClient;
import cr.fi.grupomutual.website.ws.SectionWsClient;
import groovy.util.logging.Log4j;

/**
 * Class to map header response data from the web service 
 * @author hcampos-as Avantica Technologies
 */
/**
 * @author hcampos-as
 *
 */
@Log4j
@Controller
public class HomeController{

	@Autowired
	HomeWsClient homeWsClient;
	@Autowired
	SectionWsClient sectionWsClient;
	@Autowired
	Utils util;
	
	Logger fileLog = Logger.getLogger("file");

	// Create enum with the differents types of tags
	public enum Tags {
		SLIDER, CASILLA, CARROUSEL
	}
	public static String contextPath;

	@RequestMapping(value = "/")
	public String home(Model model, @RequestParam(value = "company", required=false)  String company, HttpServletRequest request,Device device) throws JsonParseException,
			JsonMappingException, IOException {
		Rate rate=null;
		// Call the service RateChange, to get the rate change value
		contextPath= request.getContextPath();
		boolean isTablet = device.isTablet();
		model.addAttribute("device", isTablet);
		try {
			 rate = homeWsClient.getRateChangeValue();
		} catch (Exception e) {
			// TODO: handle exception
			fileLog.error("Rate error "+e.toString());
			rate = new Rate();
			rate.setAmmountBuy("0");
			rate.setAmmountSell("0");
		}
		if(company == null) {
			company = "1";
		}
		List<String> companies= (List<String>) request.getSession().getAttribute("companies");
		
		if(companies==null){
			companies= new ArrayList<String>();
			companies.add("1");
		}else{
			Boolean exist=false;
			for(int x=0; x<companies.size();x++){
				if(companies.get(x).equals(company)){
					exist=true;
				}
			}
			if(!exist){
				companies.add(company);
			}
		}
		request.getSession().setAttribute("companies", companies);
		request.getSession().setAttribute("company", company);
		
		request.getSession().setAttribute("company", company);
		
		String respFooter = showFooter(company);
		String resp = showHome(company);
		
		MatchContent contentMath=util.searchMath(resp);
		ContentPage contentPage = util.generatePage(company, resp, contentMath.getSliderList(), contentMath.getCasillaList(), contentMath.getCarouselList());
		
		String texto= contentPage.getContentPage();
		if(texto==""){
			texto="<div>";
		}
		texto += "</div>";
		
	
		model.addAttribute("itemList", util.getIdItemsFooter(company));
		model.addAttribute("footerCarousel", util.getFooterCarouselHTML());
		model.addAttribute("content", texto);
		model.addAttribute("casillas", contentPage.getCasillaHTML());
     	model.addAttribute("menuTit", util.viewListMenu(company));
		model.addAttribute("itemFooter", util.getFooterCarouselHTML());
		model.addAttribute("company", company);
		model.addAttribute("branch", "");
		model.addAttribute(rate);
		
		
		return "home";
		
	}
	
	@RequestMapping(value = "/MutualFondos")
	public String Mtufondos(Model model, @RequestParam(value = "company", required=false)  String company, HttpServletRequest request) throws JsonParseException,
			JsonMappingException, IOException {
		Rate rate=null;
		// Call the service RateChange, to get the rate change value
		contextPath= request.getContextPath();
		company = "4";
		try {
			 rate = homeWsClient.getRateChangeValue();
		} catch (Exception e) {
			// TODO: handle exception
			fileLog.error("Rate error "+e.toString());
			rate = new Rate();
			rate.setAmmountBuy("0");
			rate.setAmmountSell("0");
		}
		@SuppressWarnings("unchecked")
		List<String> companies= (List<String>) request.getSession().getAttribute("companies");
		
		if(companies==null){
			companies= new ArrayList<String>();
			companies.add("1");
		}else{
			Boolean exist=false;
			for(int x=0; x<companies.size();x++){
				if(companies.get(x).equals(company)){
					exist=true;
				}
			}
			if(!exist){
				companies.add(company);
			}
		}
		request.getSession().setAttribute("companies", companies);
		request.getSession().setAttribute("company", company);

		String respFooter = showFooter(company);
		String resp = showHome(company);
		
		MatchContent contentMath=util.searchMath(resp);
		ContentPage contentPage = util.generatePage(company, resp, contentMath.getSliderList(), contentMath.getCasillaList(), contentMath.getCarouselList());
		
		String texto= contentPage.getContentPage();
		if(texto==""){
			texto="<div>";
		}
		texto += "</div>";
		model.addAttribute("defaultImage", "someurl");
		
		model.addAttribute("itemList", util.getIdItemsFooter(company));
		model.addAttribute("footerCarousel", util.getFooterCarouselHTML());
		model.addAttribute("content", texto);
		model.addAttribute("casillas", contentPage.getCasillaHTML());
		model.addAttribute("menuTit", util.viewListMenu(company));
		model.addAttribute("itemFooter", util.getFooterCarouselHTML());
		model.addAttribute("company", company);
		model.addAttribute("branch", "/MutualFondos");
		model.addAttribute(rate);
		return "home";
		
	}
	
	@RequestMapping(value = "/MutualLeasing")
	public String MtuLeasing(Model model, @RequestParam(value = "company", required=false)  String company, HttpServletRequest request) throws JsonParseException,
			JsonMappingException, IOException {
		Rate rate=null;
		// Call the service RateChange, to get the rate change value
		contextPath= request.getContextPath();
		company = "5";
		try {
			 rate = homeWsClient.getRateChangeValue();
		} catch (Exception e) {
			// TODO: handle exception
			fileLog.error("Rate error "+e.toString());
			rate = new Rate();
			rate.setAmmountBuy("0");
			rate.setAmmountSell("0");
		}
		List<String> companies= (List<String>) request.getSession().getAttribute("companies");
		
		if(companies==null){
			companies= new ArrayList<String>();
			companies.add("1");
		}else{
			Boolean exist=false;
			for(int x=0; x<companies.size();x++){
				if(companies.get(x).equals(company)){
					exist=true;
				}
			}
			if(!exist){
				companies.add(company);
			}
		}
		request.getSession().setAttribute("companies", companies);
		request.getSession().setAttribute("company", company);
		
		request.getSession().setAttribute("company", company);
		model.addAttribute("menuTit", util.viewListMenu(company));
		
		String respFooter = showFooter(company);
		model.addAttribute("itemList", util.getIdItemsFooter(company));
		model.addAttribute("itemFooter", util.getFooterCarouselHTML());
		model.addAttribute("company", company);
		model.addAttribute(rate);

		String resp = showHome(company);
		
		MatchContent contentMath=util.searchMath(resp);
		ContentPage contentPage = util.generatePage(company, resp, contentMath.getSliderList(), contentMath.getCasillaList(), contentMath.getCarouselList());
		String texto= contentPage.getContentPage();
		if(texto==""){
			texto="<div>";
		}
			texto += "</div>";
		
			model.addAttribute("itemList", util.getIdItemsFooter(company));
			model.addAttribute("footerCarousel", util.getFooterCarouselHTML());
			model.addAttribute("content", texto);
			model.addAttribute("casillas", contentPage.getCasillaHTML());
			model.addAttribute("branch", "/MutualLeasing");

			return "home";
		
	}
	
	@RequestMapping(value = "/MutualValores")
	public String Mtulvalues(Model model, @RequestParam(value = "company", required=false)  String company, HttpServletRequest request) throws JsonParseException,
			JsonMappingException, IOException {
		Rate rate=null;
		// Call the service RateChange, to get the rate change value
		contextPath= request.getContextPath();
		company = "2";
		try {
			 rate = homeWsClient.getRateChangeValue();
		} catch (Exception e) {
			// TODO: handle exception
			fileLog.error("Rate error "+e.toString());
			rate = new Rate();
			rate.setAmmountBuy("0");
			rate.setAmmountSell("0");
		}
		if(company == null) {
			company = "4";
		}
		List<String> companies= (List<String>) request.getSession().getAttribute("companies");
		
		if(companies==null){
			companies= new ArrayList<String>();
			companies.add("1");
		}else{
			Boolean exist=false;
			for(int x=0; x<companies.size();x++){
				if(companies.get(x).equals(company)){
					exist=true;
				}
			}
			if(!exist){
				companies.add(company);
			}
		}
		request.getSession().setAttribute("companies", companies);
		request.getSession().setAttribute("company", company);
		
		request.getSession().setAttribute("company", company);
		model.addAttribute("menuTit", util.viewListMenu(company));
		
		String respFooter = showFooter(company);
		model.addAttribute("itemList", util.getIdItemsFooter(company));
		model.addAttribute("itemFooter", util.getFooterCarouselHTML());
		model.addAttribute("company", company);
		model.addAttribute(rate);

		String resp = showHome(company);
		
		
		MatchContent contentMath=util.searchMath(resp);
		ContentPage contentPage = util.generatePage(company, resp, contentMath.getSliderList(), contentMath.getCasillaList(), contentMath.getCarouselList());
		
		String texto= contentPage.getContentPage();
		if(texto==""){
			texto="<div>";
		}
			texto += "</div>";
			
			model.addAttribute("itemList", util.getIdItemsFooter(company));
			model.addAttribute("footerCarousel", util.getFooterCarouselHTML());
			model.addAttribute("content", texto);
			model.addAttribute("casillas", contentPage.getCasillaHTML());
			model.addAttribute("branch", "/MutualValores");
			return "home";
		
	}
	
	@RequestMapping(value = "/MutualSeguros")
	public String MtuSeguros(Model model, @RequestParam(value = "company", required=false)  String company, HttpServletRequest request) throws JsonParseException,
			JsonMappingException, IOException {
		Rate rate=null;
		// Call the service RateChange, to get the rate change value
		contextPath= request.getContextPath();
		company = "3";
		try {
			 rate = homeWsClient.getRateChangeValue();
		} catch (Exception e) {
			// TODO: handle exception
			fileLog.error("Rate error "+e.toString());
			rate = new Rate();
			rate.setAmmountBuy("0");
			rate.setAmmountSell("0");
		}
		if(company == null) {
			company = "4";
		}
		List<String> companies= (List<String>) request.getSession().getAttribute("companies");
		
		if(companies==null){
			companies= new ArrayList<String>();
			companies.add("1");
		}else{
			Boolean exist=false;
			for(int x=0; x<companies.size();x++){
				if(companies.get(x).equals(company)){
					exist=true;
				}
			}
			if(!exist){
				companies.add(company);
			}
		}
		request.getSession().setAttribute("companies", companies);
		request.getSession().setAttribute("company", company);
		
		request.getSession().setAttribute("company", company);
		model.addAttribute("menuTit", util.viewListMenu(company));
		
		String respFooter = showFooter(company);
		model.addAttribute("itemList", util.getIdItemsFooter(company));
		model.addAttribute("itemFooter", util.getFooterCarouselHTML());
		model.addAttribute("company", company);
		model.addAttribute(rate);

		String resp = showHome(company);
		
		
		MatchContent contentMath=util.searchMath(resp);
		ContentPage contentPage = util.generatePage(company, resp, contentMath.getSliderList(), contentMath.getCasillaList(), contentMath.getCarouselList());
		String texto= contentPage.getContentPage();
		if(texto==""){
			texto="<div>";
		}
			texto += "</div>";
			model.addAttribute("itemList", util.getIdItemsFooter(company));
			model.addAttribute("footerCarousel", util.getFooterCarouselHTML());
			model.addAttribute("content", texto);
			model.addAttribute("casillas", contentPage.getCasillaHTML());
			model.addAttribute("branch", "/MutualSeguros");

			return "home";
		
	}
	
	public static String contextPath2;
	@RequestMapping(value = "/contentCasilla")
	@ResponseBody
	public String template(Model model, @RequestParam String code,  HttpServletRequest request) throws JsonParseException, JsonMappingException, IOException {
		
		contextPath2=request.getContextPath();
		String company = (String) request.getSession().getAttribute("company");
		
		List<String> companies= (List<String>) request.getSession().getAttribute("companies");
		
		ContentSection cnt = sectionWsClient.getContentSection(code,company);
		
		String resp="";
		if(cnt!=null){
			if(cnt.getConsultContentSectionMsjRespType()!=null){
				if(cnt.getConsultContentSectionMsjRespType().getSection()!=null){
					 resp = cnt.getConsultContentSectionMsjRespType().getSection().getContent();
				}
				else{
					for(int x=0; x<companies.size();x++){
						cnt = sectionWsClient.getContentSection(code,companies.get(x));
						if(cnt.getConsultContentSectionMsjRespType().getSection()!=null){
							 resp = cnt.getConsultContentSectionMsjRespType().getSection().getContent();
							 company=companies.get(x);
							 request.getSession().setAttribute("company",companies.get(x));
						}
					 }
				}
			}
		}
		
		
		MatchContent contentMath=util.searchMath(resp);
		ContentPage contentPage = util.generatePage(company, resp, contentMath.getSliderList(), contentMath.getCasillaList(), contentMath.getCarouselList());
		String texto= contentPage.getContentPage();
		if(texto==""){
			texto="<div>";
		}
		texto += "</div>";
		
		model.addAttribute("casillaContent", texto);
		
		return texto;
	}
	
	@RequestMapping(value = "/mapaDelSitio")
	public String showSiteMap(Model model, HttpServletRequest request) throws JsonParseException, JsonMappingException, IOException {
		Rate rate=null;
		// Call the service RateChange, to get the rate change value
		try {
			 rate = homeWsClient.getRateChangeValue();
		} catch (Exception e) {
			fileLog.error("Rate error "+e.toString());
			rate= new Rate();
			rate.setAmmountBuy("0");
			rate.setAmmountSell("0");
		}
		String company = (String) request.getSession().getAttribute("company");
		
		JSONArray listNodes = new JSONArray();
		ArrayList<Section> pageStructure = util.section(company);
		
		for(Section sect: pageStructure){   
			if (sect.getTypeSection().getTypeSection().contains("Menu") || sect.getTypeSection().getTypeSection().contains("Pagina")) {
				JSONObject node = new JSONObject();
				node.put("id", sect.getCode());
				if(sect.getSectionFather().equalsIgnoreCase("0")){
					node.put("parent", "#");
				}
				else if(sect.getSectionFather().equalsIgnoreCase("-1")){
					node.put("parent", "#");
				}
				else{ 
					node.put("parent", sect.getSectionFather());
				}
				node.put("text", sect.getTitle());			
				listNodes.put(node);
			}
		}
		
		model.addAttribute(rate);
		model.addAttribute("menuTit",util.viewListMenu(company));
		model.addAttribute("structure",listNodes);
		model.addAttribute("itemListMap", util.viewTree(company));
		model.addAttribute("footerCarousel", util.getFooterCarouselHTML());
		model.addAttribute("itemList", util.getIdItemsFooter(company));
		model.addAttribute("company", "?company="+company);
		
		return "sitemap";
		
	}

	public String showHome(String company) {
		String rest = "";
		// listM is a Arraylist that contains the elements the structure class
		ArrayList<Section> listM = new ArrayList<Section>();
		// listMenu is a ArrayList that return the elements should view in the
		// menu the page html
		Structure structure=null;
		try {
			structure = sectionWsClient.getStructureSite(company);
		} catch (Exception e) {
			fileLog.error("Structure error "+e.toString());
			// TODO: handle exception
		}
		// fill the listM with the each section elements the menu
		try {
			listM = structure.getConsultStructureSiteMsjRestType().getSection();
		} catch (Exception e) {
			fileLog.error("Structure errors "+e.toString());
			// TODO: handle exception
		}
		List<Section> listItemFooter= new ArrayList<Structure.ConsultStructureSiteMsjRestType.Section>();
		for (int x = 0; x < listM.size(); x++) {
			Section listMTemp = listM.get(x);
			if (listMTemp.getSectionFather().contains("-1")||listMTemp.getSectionFather().contains("0")) {
				if (listMTemp.getTypeSection().getTypeSection().contains("Pagina")||listMTemp.getTypeSection().getTypeSection().contains("Menu")) {
					if(listMTemp.getTitle().contains("Home")){
						if(listMTemp.getEstatus().contains("P")){
							ContentSection contentSection=sectionWsClient.getContentSection(listMTemp.getCode(),company);
							if(contentSection.getConsultContentSectionMsjRespType()!=null){
								ConsultSectionContentMsjRespType contentType=contentSection.getConsultContentSectionMsjRespType();
								if(contentType!=null){
									if(contentType.getSection()!=null){
										rest = contentType.getSection().getContent();
										return rest;
									}
								}
							}
						}
					}
				}
			}
		}
		return rest;
	}
	
	public String showFooter(String company) {
		String rest = "";
		// listM is a Arraylist that contains the elements the structure class
		ArrayList<Section> listM = new ArrayList<Section>();
		// listMenu is a ArrayList that return the elements should view in the
		// menu the page html
		Structure structure=null;
		try {
			structure = sectionWsClient.getStructureSite(company);
		} catch (Exception e) {
			fileLog.error("Structure error "+e.toString());
			// TODO: handle exception
		}
		// fill the listM with the each section elements the menu
		try {
			listM = structure.getConsultStructureSiteMsjRestType().getSection();
		} catch (Exception e) {
			fileLog.error("Structure errors "+e.toString());
			// TODO: handle exception
		}
		List<Section> listItemFooter= new ArrayList<Structure.ConsultStructureSiteMsjRestType.Section>();
		for (int x = 0; x < listM.size(); x++) {
			Section listMTemp = listM.get(x);
			if (listMTemp.getSectionFather().contains("0")) {
				
				if (listMTemp.getTypeSection().getTypeSection().contains("Footer")) {
					if(listMTemp.getTitle().contains("Footer")){
						if(sectionWsClient.getContentSection(listMTemp.getCode(),company)!=null){
							if(sectionWsClient.getContentSection(listMTemp.getCode(),company).getConsultContentSectionMsjRespType()!=null){
								if(sectionWsClient.getContentSection(listMTemp.getCode(),company).getConsultContentSectionMsjRespType().getSection()!=null){
									if(sectionWsClient.getContentSection(listMTemp.getCode(),company).getConsultContentSectionMsjRespType().getSection().getContent()!=null){
										rest = sectionWsClient.getContentSection(listMTemp.getCode(),company).getConsultContentSectionMsjRespType().getSection().getContent();
									}
								}
							}	
						}
						
						return rest;
					}
				}
			}
		}
		return rest;
	}
}

