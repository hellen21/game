package cr.fi.grupomutual.website.controllers;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mobile.device.Device;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import cr.fi.grupomutual.website.controllers.HomeController.Tags;
import cr.fi.grupomutual.website.entities.CarouselItem;
import cr.fi.grupomutual.website.entities.CasillaItem;
import cr.fi.grupomutual.website.entities.ContentPage;
import cr.fi.grupomutual.website.entities.ContentSection;
import cr.fi.grupomutual.website.entities.MatchContent;
import cr.fi.grupomutual.website.entities.Rate;
import cr.fi.grupomutual.website.entities.SliderItem;
import cr.fi.grupomutual.website.entities.Structure;
import cr.fi.grupomutual.website.entities.ContentSection.ConsultSectionContentMsjRespType;
import cr.fi.grupomutual.website.entities.Structure.ConsultStructureSiteMsjRestType.Section;
import cr.fi.grupomutual.website.utilities.Constant;
import cr.fi.grupomutual.website.utilities.TemplatesGenerator;
import cr.fi.grupomutual.website.utilities.Utils;
import cr.fi.grupomutual.website.ws.HomeWsClient;
import cr.fi.grupomutual.website.ws.SectionWsClient;

import org.json.*;
@Controller
public class TemplateContentController extends Utils {
	@Autowired
	HomeWsClient homeWsClient;
	@Autowired
	SectionWsClient sectionWsClient;
	@Autowired
	Utils util;
	

	@RequestMapping(value = "/{textualPart:[aA-zZÀ-ÿ-0-9]+}/{code:\\d*}")
	public String template(Model model, @PathVariable String textualPart, @PathVariable String code, HttpServletRequest request, Device device)
			throws JsonParseException, JsonMappingException, IOException {

		String company = (String) request.getSession().getAttribute("company");
		

		ContentSection cnt = sectionWsClient.getContentSection(code,company);
		
		if(cnt.getConsultContentSectionMsjRespType().getSection() == null){
			for(int i=1; i<5; i++){
				cnt = sectionWsClient.getContentSection(code,String.valueOf(i));
				if(cnt.getConsultContentSectionMsjRespType().getSection()!=null){
					company = String.valueOf(i);
					break;
				}
			}
			
		}
		Rate rate=null;
		// Call the service RateChange, to get the rate change value
		try {
			 rate = homeWsClient.getRateChangeValue();
		} catch (Exception e) {
			// TODO: handle exceptio
			}
		List<String> companies= (List<String>) request.getSession().getAttribute("companies");
		boolean isTablet = device.isTablet();
		model.addAttribute("device", isTablet);
		String resp="";
		if(cnt.getConsultContentSectionMsjRespType().getSection()!=null){
			 resp = cnt.getConsultContentSectionMsjRespType().getSection().getContent();
		}
		else{
			if(companies!=null){
				for(int x=0; x<companies.size();x++){
					cnt = sectionWsClient.getContentSection(code,companies.get(x));
					if(cnt.getConsultContentSectionMsjRespType().getSection()!=null){
						 resp = cnt.getConsultContentSectionMsjRespType().getSection().getContent();
						 company=companies.get(x);
						 request.getSession().setAttribute("company",companies.get(x));
					}
					
				 }
			}
		}
		model.addAttribute(rate);
		model.addAttribute("itemList", util.getIdItemsFooter(company));
		model.addAttribute("menuTit", viewListMenu(company));
		model.addAttribute("company", "?company="+company);
		if(resp==""){
			
			model.addAttribute("footerCarousel", util.getFooterCarouselHTML());
			return "templateError";
		}
		MatchContent contentMath=util.searchMath(resp);
		
		ArrayList<String> sliderList = new ArrayList<String>();
		ArrayList<String> casillaList = new ArrayList<String>();
		ArrayList<String> carouselList = new ArrayList<String>();

		sliderList= contentMath.getSliderList();
		casillaList= contentMath.getCasillaList();
		carouselList= contentMath.getCarouselList();

		TemplatesGenerator tg = new TemplatesGenerator();
		String texto = resp; //total answer the server
		String casillasHTML ="";

		// ContentSection cnt = sectionWsClient.getContentSection(code);

		if (sliderList.size() > 0) {
			String[] newRespSlider = resp.split(Constant.SLIDER_REGEX);
			texto = newRespSlider[0];

			for (int i = 0; i < sliderList.size(); i++) {
				
				String resp1 = null;
				String slider="";
				ContentSection getContent= sectionWsClient.getContentSection(sliderList.get(i),company);
				if(getContent!=null){
					ConsultSectionContentMsjRespType contentType=getContent.getConsultContentSectionMsjRespType();
					if(contentType.getSection()!=null){
						resp1=contentType.getSection().getContent();
						String tempResp1 = resp1.replace("<p>", "");
						tempResp1 = tempResp1.replace("</p>", "");
						SliderItem listItemsSlider = new ObjectMapper().readValue(tempResp1, SliderItem.class);
						slider = tg.createSliderTemplate(listItemsSlider);
					}
				}	

				texto += slider;
				texto += "<div class='container bodyContainer'>";
				texto += newRespSlider[i + 1];
			}
		}
		if (casillaList.size() > 0) {
			
			int i;
			String word,subword;
			StringTokenizer elementos,subelementos;
			boolean boole= false;
			elementos = new StringTokenizer(texto,"[[[]]]");
			texto = "";
			i = 0;
			while(elementos.hasMoreTokens()){
				word = elementos.nextToken();
				subelementos = new StringTokenizer(word,"[]");
				while(subelementos.hasMoreTokens()){
					subword = subelementos.nextToken();
					if(subword.contains("Casilla")){
						boole=true;
						i++;
						subword="";
					}
					if(boole==false&&i>0){
						ArrayList<CasillaItem> casillas = new ArrayList<CasillaItem>();
						for (int y = 0; y < i; y++) {
							
							String resp1 = null;
							ContentSection getContent= sectionWsClient.getContentSection(casillaList.get(y),company);
							if(getContent!=null){
								ConsultSectionContentMsjRespType contentType=getContent.getConsultContentSectionMsjRespType();
								if(contentType.getSection()!=null){
									resp1=contentType.getSection().getContent();
									String tempResp1 = resp1.replace("<p>", "");
									tempResp1 = tempResp1.replace("</p>", "");
									CasillaItem listItemsSlider = new ObjectMapper().readValue(tempResp1, CasillaItem.class);
									casillas.add(listItemsSlider);
								}
							}	
						}
						for (int y = 0; y < i; y++) {
							casillaList.remove(0);
						}
						i=0;
						String [] result = tg.createCasillaTemplate(casillas); 
						casillasHTML = result[1];
						texto += result[0];	
						texto+=subword;
					}
					else{
						boole=false;
						texto+=subword;
					}
				}
			}
		}
		if (carouselList.size()>0){
			String[] newRespCarousel = texto.split(Constant.CAROUSEL_REGEX_SEC);
			texto = newRespCarousel[0];
			for (int i = 0; i < carouselList.size(); i++) {
				String resp1 = null;
				ContentSection getContent= sectionWsClient.getContentSection(carouselList.get(i),company);
				if(getContent!=null){
					ConsultSectionContentMsjRespType contentType=getContent.getConsultContentSectionMsjRespType();
					if(contentType.getSection()!=null){
						resp1=contentType.getSection().getContent();
						String tempResp1 = resp1.replace("<p>", "");
						tempResp1 = tempResp1.replace("</p>", "");
						CarouselItem listItemsCarrousels = new ObjectMapper().readValue(tempResp1, CarouselItem.class);
						String carousel = tg.createCarouselTemplate(listItemsCarrousels);
						texto += carousel;
						texto += newRespCarousel[i+1].substring(1);
					}
				}
			}
		}
		String clientID = (String) request.getSession().getAttribute("company");
		
		
		try {
			ArrayList<CasillaItem> casillas = new ArrayList<CasillaItem>();
			resp = resp.replace("<p>", "");
			resp = resp.replace("</p>", "");
			JSONObject jsonObject = new JSONObject(resp); 
			CasillaItem listItemsSlider = new ObjectMapper().readValue(resp, CasillaItem.class);
			casillas.add(listItemsSlider);
			String [] result = tg.createCasillaTemplate(casillas);
			texto = result[0];	
			//casillasHTML = result[1];
		} catch (Exception e) {
			// TODO: handle exception
		}

		texto += "</div>";
		model.addAttribute("itemList", util.getIdItemsFooter(company));
		model.addAttribute("content", texto);
		model.addAttribute("casillas",casillasHTML);
		model.addAttribute("footerCarousel", util.getFooterCarouselHTML());
		model.addAttribute("branch", "");

		return "templateContent";
	}
	
	@RequestMapping(value = "/{branch:[aA-zZÀ-ÿ-0-9]+}/{textualPart:[aA-zZÀ-ÿ-0-9]+}/{code:\\d*}")
	public String templateMode(Model model,@PathVariable String branch, @PathVariable String textualPart, @PathVariable String code, HttpServletRequest request, Device device)
			throws JsonParseException, JsonMappingException, IOException {

		String company = (String) request.getSession().getAttribute("company");
		
		if(branch.equalsIgnoreCase("MutualFondos")){
			company = "4";
		}
		else if(branch.equalsIgnoreCase("MutualSeguros")){
			company = "3";
		}
		else if(branch.equalsIgnoreCase("MutualValores")){
			company = "2";
		}
		else if(branch.equalsIgnoreCase("MutualLeasing")){
			company = "5";
		}
		
		
		String response = showHome(company);
		
		MatchContent contentMatha=util.searchMath(response);
		ContentPage contentPage = util.generatePage(company, response, contentMatha.getSliderList(), contentMatha.getCasillaList(), contentMatha.getCarouselList());
		
		ContentSection cnt = sectionWsClient.getContentSection(code,company);
		Rate rate=null;
		// Call the service RateChange, to get the rate change value
		try {
			 rate = homeWsClient.getRateChangeValue();
		} catch (Exception e) {
			// TODO: handle exceptio
			}
		List<String> companies= (List<String>) request.getSession().getAttribute("companies");
		boolean isTablet = device.isTablet();
		model.addAttribute("device", isTablet);
		String resp="";
		if(cnt.getConsultContentSectionMsjRespType().getSection()!=null){
			 resp = cnt.getConsultContentSectionMsjRespType().getSection().getContent();
		}
		else{
			if(companies!=null){
				for(int x=0; x<companies.size();x++){
					cnt = sectionWsClient.getContentSection(code,companies.get(x));
					if(cnt.getConsultContentSectionMsjRespType().getSection()!=null){
						 resp = cnt.getConsultContentSectionMsjRespType().getSection().getContent();
						 company=companies.get(x);
						 request.getSession().setAttribute("company",companies.get(x));
					}
					
				 }
			}
		}
		model.addAttribute(rate);
		model.addAttribute("itemList", util.getIdItemsFooter(company));
		model.addAttribute("menuTit", viewListMenu(company));
		model.addAttribute("company", "/"+branch);
		if(resp==""){
			
			model.addAttribute("footerCarousel", util.getFooterCarouselHTML());
			return "templateError";
		}
		MatchContent contentMath=util.searchMath(resp);
		
		ArrayList<String> sliderList = new ArrayList<String>();
		ArrayList<String> casillaList = new ArrayList<String>();
		ArrayList<String> carouselList = new ArrayList<String>();

		sliderList= contentMath.getSliderList();
		casillaList= contentMath.getCasillaList();
		carouselList= contentMath.getCarouselList();

		TemplatesGenerator tg = new TemplatesGenerator();
		String texto = resp; //total answer the server
		String casillasHTML ="";

		// ContentSection cnt = sectionWsClient.getContentSection(code);

		if (sliderList.size() > 0) {
			String[] newRespSlider = resp.split(Constant.SLIDER_REGEX);
			texto = newRespSlider[0];

			for (int i = 0; i < sliderList.size(); i++) {
				
				String resp1 = null;
				String slider="";
				ContentSection getContent= sectionWsClient.getContentSection(sliderList.get(i),company);
				if(getContent!=null){
					ConsultSectionContentMsjRespType contentType=getContent.getConsultContentSectionMsjRespType();
					if(contentType.getSection()!=null){
						resp1=contentType.getSection().getContent();
						String tempResp1 = resp1.replace("<p>", "");
						tempResp1 = tempResp1.replace("</p>", "");
						SliderItem listItemsSlider = new ObjectMapper().readValue(tempResp1, SliderItem.class);
						slider = tg.createSliderTemplate(listItemsSlider);
					}
				}	

				texto += slider;
				texto += "<div class='container bodyContainer'>";
				texto += newRespSlider[i + 1];
			}
		}
		if (casillaList.size() > 0) {
			
			int i;
			String word,subword;
			StringTokenizer elementos,subelementos;
			boolean boole= false;
			elementos = new StringTokenizer(texto,"[[[]]]");
			texto = "";
			i = 0;
			while(elementos.hasMoreTokens()){
				word = elementos.nextToken();
				subelementos = new StringTokenizer(word,"[]");
				while(subelementos.hasMoreTokens()){
					subword = subelementos.nextToken();
					if(subword.contains("Casilla")){
						boole=true;
						i++;
						subword="";
					}
					if(boole==false&&i>0){
						ArrayList<CasillaItem> casillas = new ArrayList<CasillaItem>();
						for (int y = 0; y < i; y++) {
							
							String resp1 = null;
							ContentSection getContent= sectionWsClient.getContentSection(casillaList.get(y),company);
							if(getContent!=null){
								ConsultSectionContentMsjRespType contentType=getContent.getConsultContentSectionMsjRespType();
								if(contentType.getSection()!=null){
									resp1=contentType.getSection().getContent();
									String tempResp1 = resp1.replace("<p>", "");
									tempResp1 = tempResp1.replace("</p>", "");
									CasillaItem listItemsSlider = new ObjectMapper().readValue(tempResp1, CasillaItem.class);
									casillas.add(listItemsSlider);
								}
							}	
						}
						i=0;
						String [] result = tg.createCasillaTemplate(casillas); 
						casillasHTML = result[1];
						texto += result[0];	
						texto+=subword;
					}
					else{
						boole=false;
						texto+=subword;
					}
				}
			}
		}
		if (carouselList.size()>0){
			String[] newRespCarousel = texto.split(Constant.CAROUSEL_REGEX_SEC);
			texto = newRespCarousel[0];
			for (int i = 0; i < carouselList.size(); i++) {
				String resp1 = null;
				ContentSection getContent= sectionWsClient.getContentSection(carouselList.get(i),company);
				if(getContent!=null){
					ConsultSectionContentMsjRespType contentType=getContent.getConsultContentSectionMsjRespType();
					if(contentType.getSection()!=null){
						resp1=contentType.getSection().getContent();
						String tempResp1 = resp1.replace("<p>", "");
						tempResp1 = tempResp1.replace("</p>", "");
						CarouselItem listItemsCarrousels = new ObjectMapper().readValue(tempResp1, CarouselItem.class);
						String carousel = tg.createCarouselTemplate(listItemsCarrousels);
						texto += carousel;
						texto += newRespCarousel[i+1].substring(1);
					}
				}
			}
		}
		String clientID = (String) request.getSession().getAttribute("company");
		
		
		try {
			ArrayList<CasillaItem> casillas = new ArrayList<CasillaItem>();
			resp = resp.replace("<p>", "");
			resp = resp.replace("</p>", "");
			JSONObject jsonObject = new JSONObject(resp); 
			CasillaItem listItemsSlider = new ObjectMapper().readValue(resp, CasillaItem.class);
			casillas.add(listItemsSlider);
			String [] result = tg.createCasillaTemplate(casillas);
			texto = result[0];	
			//casillasHTML = result[1];
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		
		texto += "</div>";
	
		model.addAttribute("itemList", util.getIdItemsFooter(company));
		model.addAttribute("content", texto);
		model.addAttribute("casillas",casillasHTML);
		model.addAttribute("footerCarousel", util.getFooterCarouselHTML());
		model.addAttribute("branch", "");

		return "templateContent";
	}
	
	
	public String showHome(String company) {
		String rest = "";
		// listM is a Arraylist that contains the elements the structure class
		ArrayList<Section> listM = new ArrayList<Section>();
		// listMenu is a ArrayList that return the elements should view in the
		// menu the page html
		Structure structure=null;
		try {
			structure = sectionWsClient.getStructureSite(company);
		} catch (Exception e) {
			//fileLog.error("Structure error "+e.toString());
			// TODO: handle exception
		}
		// fill the listM with the each section elements the menu
		try {
			listM = structure.getConsultStructureSiteMsjRestType().getSection();
		} catch (Exception e) {
			//fileLog.error("Structure errors "+e.toString());
			// TODO: handle exception
		}
		List<Section> listItemFooter= new ArrayList<Structure.ConsultStructureSiteMsjRestType.Section>();
		for (int x = 0; x < listM.size(); x++) {
			Section listMTemp = listM.get(x);
			if (listMTemp.getSectionFather().contains("-1")||listMTemp.getSectionFather().contains("0")) {
				if (listMTemp.getTypeSection().getTypeSection().contains("Pagina")||listMTemp.getTypeSection().getTypeSection().contains("Menu")) {
					if(listMTemp.getTitle().contains("Home")){
						if(listMTemp.getEstatus().contains("P")){
							ContentSection contentSection=sectionWsClient.getContentSection(listMTemp.getCode(),company);
							if(contentSection.getConsultContentSectionMsjRespType()!=null){
								ConsultSectionContentMsjRespType contentType=contentSection.getConsultContentSectionMsjRespType();
								if(contentType!=null){
									if(contentType.getSection()!=null){
										rest = contentType.getSection().getContent();
										return rest;
									}
								}
							}
						}
					}
				}
			}
		}
		return rest;
	}
}
