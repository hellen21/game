package cr.fi.grupomutual.website.configuration;

import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;
import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.cache.CacheManager;
import org.springframework.cache.guava.GuavaCacheManager;
import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.cache.CacheBuilder;

import cr.fi.grupomutual.website.services.NearMeService;
import cr.fi.grupomutual.website.services.NearMeServiceImpl;
import cr.fi.grupomutual.website.utilities.Utils;
import cr.fi.grupomutual.website.ws.ContactWsClientImpl;
import cr.fi.grupomutual.website.ws.ContantWsClient;
import cr.fi.grupomutual.website.ws.HomeWsClient;
import cr.fi.grupomutual.website.ws.HomeWsClientImpl;
import cr.fi.grupomutual.website.ws.NearMeWsClient;
import cr.fi.grupomutual.website.ws.NearMeWsClientImpl;
import cr.fi.grupomutual.website.ws.SectionWsClient;
import cr.fi.grupomutual.website.ws.SectionWsClientImpl;

@Configuration
public class BeansContext {

	@Value("${cache.timeExpired}")
	private int EXPIRED_TIME;
	
	@Bean
	public HomeWsClient homeWsClient() {
		return new HomeWsClientImpl();
	}

	@Bean
	public SectionWsClient sectionWsClient() {
		return new SectionWsClientImpl();
	}

	@Bean
	public CacheManager cacheManager() {
		GuavaCacheManager cacheManager = new GuavaCacheManager();
		cacheManager.setCacheBuilder(
		        CacheBuilder.
		        newBuilder().
		        expireAfterWrite(5, TimeUnit.MINUTES).
		        maximumSize(100));
		return cacheManager;
	}

	@Bean
	public NearMeService nearMeService() {
		return new NearMeServiceImpl();
	}

	@Bean
	public NearMeWsClient nearMeWsClient() {
		return new NearMeWsClientImpl();
	}

	@Bean
	public Utils util() {
		return new Utils();
	}
	
	@Bean
	public ContantWsClient contantWsClient() {
		return new ContactWsClientImpl();
	}

	@Bean
	public EmbeddedServletContainerCustomizer containerCustomizer() {
		return new EmbeddedServletContainerCustomizer() {
			@Override
			public void customize(ConfigurableEmbeddedServletContainer container) {

				ErrorPage error400Page = new ErrorPage(HttpStatus.BAD_REQUEST, "/errors/templateError.html");
				ErrorPage error401Page = new ErrorPage(HttpStatus.UNAUTHORIZED,	"/errors/templateError.html");
				ErrorPage error404Page = new ErrorPage(HttpStatus.NOT_FOUND,"/errors/templateError.html");
				ErrorPage error500Page = new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, "/errors/templateError.html");			

				container.addErrorPages(error400Page, error401Page, error404Page, error500Page);
			}
		};
	}

	@Bean(name="simpleMappingExceptionResolver")
    public SimpleMappingExceptionResolver exceptionResolver() {
        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();

        Properties mappings = new Properties();

        mappings.put("java.lang.Exception", "/errors/templateError.html");
        mappings.put("java.lang.RuntimeException", "/errors/templateError.html");
        
        Properties statusCodes = new Properties();
        
        statusCodes.put("error", "404");

        exceptionResolver.setStatusCodes(statusCodes);
        exceptionResolver.setExceptionMappings(mappings);  // None by default
        exceptionResolver.setDefaultErrorView("/errors/templateError.html");    // No default
        exceptionResolver.setExceptionAttribute("ex");     // Default is "exception"
        exceptionResolver.setWarnLogCategory("example.MvcLogger");     // No default
        return exceptionResolver;
    } 
	
	@Bean
	public MessageSource messageSource() {

		ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
		messageSource.setBasenames("classpath:messages_es");
		messageSource.setUseCodeAsDefaultMessage(true);
		messageSource.setDefaultEncoding("UTF-8");
		messageSource.setCacheSeconds(0);
		return messageSource;
	}
	@Bean
	 public ObjectMapper objectMapperProvider() {
	  
	  ObjectMapper mapper = new ObjectMapper();
	        /*
	         * This allows the ObjectMapper to accept single values for a collection.
	         * For example: "location" property in the returned JSON is a collection that 
	         * can accept multiple objects but, in deserialization process, this property just 
	         * have one object and causes an Exception.
	         */
	  mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
	        
	  /* 
	         * If some JSON property is not present, avoid exceptions setting
	         * FAIL_ON_UNKNOWN_PROPERTIES to false 
	         */
	  mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

	  return mapper;
	 }
	
	@Bean
	 public RestTemplate restTemplate() {
	     RestTemplate restTemplate = new RestTemplate(clientHttpRequestFactory());
	     MappingJackson2HttpMessageConverter converter = (MappingJackson2HttpMessageConverter) restTemplate.getMessageConverters().get(6);
	     StringHttpMessageConverter stringConverter= new StringHttpMessageConverter(Charset.defaultCharset());
		 stringConverter.setWriteAcceptCharset(false);
	     restTemplate.getMessageConverters().add(0, stringConverter);
	     converter.setObjectMapper(objectMapperProvider());
	  return restTemplate;
	 }
	
	
	
	private ClientHttpRequestFactory clientHttpRequestFactory() {
		  HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();
		     factory.setReadTimeout(30000);
		     factory.setConnectTimeout(30000);
		     return factory;
	}
	
	
	

}
