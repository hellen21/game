package cr.fi.grupomutual.website.utilities;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import cr.fi.grupomutual.website.controllers.HomeController.Tags;
import cr.fi.grupomutual.website.entities.CarouselItem;
import cr.fi.grupomutual.website.entities.CasillaItem;
import cr.fi.grupomutual.website.entities.ContentPage;
import cr.fi.grupomutual.website.entities.ContentSection;
import cr.fi.grupomutual.website.entities.ContentSection.ConsultSectionContentMsjRespType;
import cr.fi.grupomutual.website.entities.ItemMenus;
import cr.fi.grupomutual.website.entities.MatchContent;
import cr.fi.grupomutual.website.entities.SliderItem;
import cr.fi.grupomutual.website.entities.Structure;
import cr.fi.grupomutual.website.entities.Structure.ConsultStructureSiteMsjRestType.Section;
import cr.fi.grupomutual.website.ws.SectionWsClient;

public class Utils {
	
	private String ip;
	private String hostname;
	private String date;
	private String time;
	private String footerCarouselHTML;
	
	@Autowired
	SectionWsClient sectionWsClient;
	
	public String getIp() {
		ip = "";
		try {
			ip = InetAddress.getLocalHost().getHostAddress();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ip;
	}
	
	public String getHostname() {
		hostname = "";
		try {
			hostname = InetAddress.getLocalHost().getHostName();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return hostname;
	}
	
	public String getDate(){
		 DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");		
		   Date d = new Date();
		   date = dateFormat.format(d);
		   return date;
	}
	
	public String getTime(){
		 DateFormat dateFormat = new SimpleDateFormat("hh:mm");
		   //get current date time with Date()
		   Date t = new Date();
		   time = dateFormat.format(t);
		   return time;
	}
		
	public String getFooterCarouselHTML() {
		return footerCarouselHTML;
	}

	public void setFooterCarouselHTML(String footerCarouselHTML) {
		this.footerCarouselHTML = footerCarouselHTML;
	}

	/**
	 * The viewListMenu is a function for create the list that it will contain the items of the menu
	 * @return 
	 */
	public ArrayList<Object> viewListMenu(String company) {
		// listM is a Arraylist that contains the elements the structure class
		ArrayList<Section> listM = section(company);
		ArrayList<Object> listMenu = new ArrayList<Object>();
		
		int contMenuItems=0;
		
		for (int x = 0; x < listM.size(); x++) {
			Section listMTemp = listM.get(x);
			if ((listMTemp.getEstatus().contains("N"))) {

				//cuando es N no publicar, P es publicar 
			} 
			else if (listMTemp.getTypeSection().getTypeSection().contains("Menu") || listMTemp.getTypeSection().getTypeSection()
					.contains("Casilla")) {
				// if element is a sectionFather equal 0 mean the element is
				// first level the menu
				if (listMTemp.getSectionFather().contains("0")&&contMenuItems<3) {
					if(listMTemp.getTitle().equals("Ley 8204")){
					}
					else if(listMTemp.getTitle().equals("Gobierno Corporativo")){
					}
					else if(listMTemp.getTitle().equals("Información Financiera")){
					}	
					else{
						if(listMenu.size()<=3){
							ContentSection cnt = sectionWsClient.getContentSection(listM.get(x).getCode(),company);
							boolean notBody=false;
							if(cnt.getConsultContentSectionMsjRespType().getSection()!=null){
								notBody=true;
							}
							String urlPrin= formatGlyphicons(listM.get(x).getUrl());
							ItemMenus men = new ItemMenus(listM.get(x).getSectionFather(), listM.get(x).getCode(), 
															listM.get(x).getTitle(), listM.get(x).getEstatus(),
																listM.get(x).getTypeSection().getTypeSection(), urlPrin, notBody);
							listMenu.add(men);
							int contSubMenuItems=0;
							for (int y = 0; y < listM.size(); y++) {
								Section listMTemp2 = listM.get(y);
								// if element is a submenu
								if ((listM.get(x).getCode()).equals((listMTemp2.getSectionFather()))&&contSubMenuItems<8) {
									if(listMTemp2.getEstatus().contains("P")){
										String urlSecon= formatGlyphicons(listMTemp2.getUrl());
										ItemMenus itemSubMen = new ItemMenus(listMTemp2.getSectionFather(), listMTemp2.getCode(), listMTemp2.getTitle(), listMTemp2.getEstatus(), listMTemp2.getTypeSection().getTypeSection(),urlSecon, true);
										men.setSubMenus(itemSubMen);
										contSubMenuItems++;
									}
								}
								
							}
								
						}
						contMenuItems++;
					}
				}
			}
		}
		return listMenu;
	}
	
	
	public ArrayList<Object> viewTree(String company) {
		// listM is a Arraylist that contains the elements the structure class
		ArrayList<Section> listM = section(company);
		ArrayList<Object> listMenu = new ArrayList<Object>();
		
		int contMenuItems=0;
		
		for (int x = 0; x < listM.size(); x++) {
			Section listMTemp = listM.get(x);
			if (listMTemp.getTypeSection().getTypeSection().contains("Menu") || listMTemp.getTypeSection().getTypeSection().contains("Pagina")) {
				// if element is a sectionFather equal 0 mean the element is
				// first level the menu
					if(listMTemp.getTitle().equals("Ley 8204")){
					}
					else if(listMTemp.getTitle().equals("Gobierno Corporativo")){
					}
					else if(listMTemp.getTitle().equals("Información Financiera")){
					}	
					else{
							ContentSection cnt = sectionWsClient.getContentSection(listM.get(x).getCode(),company);
							boolean notBody=false;
							if(cnt.getConsultContentSectionMsjRespType().getSection()!=null){
								notBody=true;
							}
							String urlPrin= formatGlyphicons(listM.get(x).getUrl());
							ItemMenus men = new ItemMenus(listM.get(x).getSectionFather(), listM.get(x).getCode(), 
															listM.get(x).getTitle(), listM.get(x).getEstatus(),
																listM.get(x).getTypeSection().getTypeSection(), urlPrin, notBody);
							listMenu.add(men);
							int contSubMenuItems=0;
							for (int y = 0; y < listM.size(); y++) {
								Section listMTemp2 = listM.get(y);
								// if element is a submenu
								if ((listM.get(x).getCode()).equals((listMTemp2.getSectionFather()))&&contSubMenuItems<5) {
									String urlSecon= formatGlyphicons(listMTemp2.getUrl());
									ItemMenus itemSubMen = new ItemMenus(listMTemp2.getSectionFather(), listMTemp2.getCode(), listMTemp2.getTitle(), listMTemp2.getEstatus(), listMTemp2.getTypeSection().getTypeSection(),urlSecon, true);
									men.setSubMenus(itemSubMen);
									contSubMenuItems++;
								}
							}
					}
			}
		}
		return listMenu;
	}
	
	
	public String formatGlyphicons(String icon){
		String newIcon= "glyphicons circle_exclamation_mark";
		if(icon!=null){
			String[] tempIcon=icon.split(",");
			if(1<tempIcon.length){
				newIcon= tempIcon[1];
			}else{
				try {
					newIcon=tempIcon[0];
				} catch (Exception e) {
					// TODO: handle exception
				}
			}
		}
		return newIcon;
	}
	public List<Section> getIdItemsFooter(String company){
		// listM is a Arraylist that contains the elements the structure class
		ArrayList<Section> itemsMenu = section(company);
		List<Section> listItemsFooter= new ArrayList<Structure.ConsultStructureSiteMsjRestType.Section>();
		
		String rest = "";
		if(itemsMenu!=null){
			for (int x = 0; x < itemsMenu.size(); x++) {
				Section listMTemp = itemsMenu.get(x);
				if (listMTemp.getSectionFather().contains("0")) {
					if (listMTemp.getTypeSection().getTypeSection().contains("Footer")) {
						if(listMTemp.getTitle().contains("Footer")){
							if(sectionWsClient.getContentSection(listMTemp.getCode(),company)!=null){
								if(sectionWsClient.getContentSection(listMTemp.getCode(),company).getConsultContentSectionMsjRespType()!=null){
									if(sectionWsClient.getContentSection(listMTemp.getCode(),company).getConsultContentSectionMsjRespType().getSection()!=null){
										if(sectionWsClient.getContentSection(listMTemp.getCode(),company).getConsultContentSectionMsjRespType().getSection().getContent()!=null){
											rest = sectionWsClient.getContentSection(listMTemp.getCode(),company).getConsultContentSectionMsjRespType().getSection().getContent();
										}
									}
								}	
							}
						}
					}
				}
			}
		}
		if(rest != ""){
			JSONObject obj = new JSONObject(rest);
			JSONArray arr = obj.getJSONArray("data");
			for (int i = 0; i < arr.length(); i++){
				for (int x = 0; x < itemsMenu.size(); x++) {
					Section listMTemp = itemsMenu.get(x);
					if(listMTemp.getTitle().equals(arr.getJSONObject(i).getString("titlePage")) && 
							listMTemp.getCode().equals(arr.getJSONObject(i).getString("id"))){
						listItemsFooter.add(listMTemp);
					}
				}
			}
		}
		return listItemsFooter;
	}
	
	public ArrayList<Section> section(String company){
		// listM is a Arraylist that contains the elements the structure class
		ArrayList<Section> listM = new ArrayList<Section>();
		// listMenu is a ArrayList that return the elements should view in the
		// menu the page html
		Structure structure=null;
		try {
			 structure = sectionWsClient.getStructureSite(company);
		} catch (Exception e) {
			// TODO: handle exception
		}
		// fill the listM with the each section elements the menu
		//listM = structure.getConsultStructureSiteMsjRestType().getSection();
		try {
			listM = structure.getConsultStructureSiteMsjRestType().getSection();
		} catch (Exception e) {
			// TODO: handle exception
		}
		return listM;
	}
	
	
	
	public ContentPage generatePage(String company, String resp, ArrayList<String> sliderList,ArrayList<String> casillaList,ArrayList<String> carouselList) throws JsonParseException, JsonMappingException, IOException {
		ContentPage content= new ContentPage();
		
		String texto = resp;
		TemplatesGenerator tg = new TemplatesGenerator();
		String casillasHTML= "";
		String[] newRespSlider = resp.split(Constant.SLIDER_REGEX);
		texto = newRespSlider[0];

		for (int i = 0; i < sliderList.size(); i++) {
			String resp1 = null;
			String slider="";
			ContentSection getContent= sectionWsClient.getContentSection(sliderList.get(i),company);
			if(getContent!=null){
				ConsultSectionContentMsjRespType contentType=getContent.getConsultContentSectionMsjRespType();
				if(contentType.getSection()!=null){
					resp1=contentType.getSection().getContent();
					String tempResp1 = resp1.replace("<p>", "");
					tempResp1 = tempResp1.replace("</p>", "");
					SliderItem listItemsSlider = new ObjectMapper().readValue(tempResp1, SliderItem.class);
					slider = tg.createSliderTemplate(listItemsSlider);
				}
			}	

			texto += slider;
			texto += "<div class='container bodyContainer'>";
			texto += newRespSlider[i + 1];
		}
		if (casillaList.size() > 0) {
			String[] newRespCasilla = texto.split(Constant.CASILLA_REGEX);
			texto = newRespCasilla[0];
			ArrayList<CasillaItem> casillas = new ArrayList<CasillaItem>();
			
			for (int x = 0; x < casillaList.size(); x++) {
				String resp1 = null;
				ContentSection getContent= sectionWsClient.getContentSection(casillaList.get(x),company);
				if(getContent!=null){
					ConsultSectionContentMsjRespType contentType=getContent.getConsultContentSectionMsjRespType();
					if(contentType.getSection()!=null){
						resp1=contentType.getSection().getContent();
						String tempResp1 = resp1.replace("<p>", "");
						tempResp1 = tempResp1.replace("</p>", "");
						CasillaItem listItemsSlider = new ObjectMapper().readValue(tempResp1, CasillaItem.class);
						casillas.add(listItemsSlider);
					}
				}	
			}
			String [] result = tg.createCasillaTemplate(casillas); 
			casillasHTML = result[1];
			content.setCasillaHTML(casillasHTML);
			texto += result[0];
			texto += newRespCasilla[casillaList.size()];
		}
		if (carouselList.size() > 0) {
			String[] newRespCarousel = texto.split(Constant.CAROUSEL_REGEX);
			texto = newRespCarousel[0];
			for (int i = 0; i < carouselList.size(); i++) {
				String resp1 = null;
				ContentSection getContent= sectionWsClient.getContentSection(carouselList.get(i),company);
				if(getContent!=null){
					ConsultSectionContentMsjRespType contentType=getContent.getConsultContentSectionMsjRespType();
					if(contentType.getSection()!=null){
						resp1=contentType.getSection().getContent();
						String tempResp1 = resp1.replace("<p>", "");
						tempResp1 = tempResp1.replace("</p>", "");
						CarouselItem listItemsCarrousels = new ObjectMapper().readValue(tempResp1, CarouselItem.class);
						String carousel = tg.createCarouselTemplate(listItemsCarrousels);
						setFooterCarouselHTML(carousel);
						texto += newRespCarousel[carouselList.size()];
					}
				}
			}
		}
		content.setContentPage(texto);
		return content;
	}
	
	public MatchContent searchMath(String resp) {
		MatchContent matContent= new MatchContent();
		ArrayList<String> sliderList = new ArrayList<String>();
		ArrayList<String> casillaList = new ArrayList<String>();
		ArrayList<String> carouselList = new ArrayList<String>();

		Pattern pattern = Pattern.compile(Constant.MAIN_REGEX);
		
		Matcher match = pattern.matcher(resp);
		while (match.find()) {
			String tag = "";
			String id = "";

			String text = match.group();
			pattern = Pattern.compile(Constant.TAG_ID_REGEX);
			Matcher m = pattern.matcher(text);
			if (m.find()) {
				text = m.group();
			}

			pattern = Pattern.compile(Constant.TAG_REGEX);
			m = pattern.matcher(text);
			if (m.find()) {
				tag = m.group();
			}

			pattern = Pattern.compile(Constant.ID_REGEX);
			m = pattern.matcher(text);
			if (m.find()) {
				id = m.group();
			}

			Tags currentTag = Tags.valueOf(tag.toUpperCase());
			switch (currentTag) {
			case SLIDER:
				sliderList.add(id);
				break;
			case CASILLA:
				casillaList.add(id);
				break;
			case CARROUSEL:
				carouselList.add(id);
				break;
			}
		}
		matContent.setCarouselList(carouselList);
		matContent.setCasillaList(casillaList);
		matContent.setSliderList(sliderList);
		return matContent;
	}
	
	public Cookie getCookie(HttpServletRequest request, String name) {
        if (request.getCookies() != null) {
            for (Cookie cookie : request.getCookies()) {
                if (cookie.getName().equals(name)) {
                    return cookie;
                }
            }
        }

        return null;
    }

}





